# any-llm Documentation

> Complete documentation for any-llm - A Python library providing a single interface to different llm providers.

This file contains all documentation pages concatenated for easy consumption by AI systems.

---

## index.md

<!-- Source: index.md -->

<p align="center">
  <picture>
    <img src="./images/any-llm-logo.png" width="20%" alt="Project logo"/>
  </picture>
</p>

`any-llm` is a Python library providing a single interface to different llm providers.

### Demo

Try `any-llm` in action with our interactive chat demo that showcases streaming completions and provider switching:

**[ðŸ“‚ Run the Demo](https://github.com/mozilla-ai/any-llm/tree/main/demos/chat#readme)**

The demo features real-time streaming responses, multiple provider support, and collapsible "thinking" content display.

### Getting Started

Refer to the [Quickstart](#./quickstart.md) for instructions on installation and usage.

### Parameters

For a complete list of available functions and their parameters, see the [completion](#./api/completion.md), [embedding](#./api/embedding.md), and [responses](#./api/responses.md) API documentation.

### Error Handling

`any-llm` provides custom exceptions to indicate common errors like missing API keys
and parameters that are unsupported by a specific provider.

For more details on exceptions, see the [exceptions API documentation](#./api/exceptions.md).

## For AI Systems

This documentation is available in two AI-friendly formats:

- **[llms.txt](https://mozilla-ai.github.io/any-llm/llms.txt)** - A structured overview with curated links to key documentation sections
- **[llms-full.txt](https://mozilla-ai.github.io/any-llm/llms-full.txt)** - Complete documentation content concatenated into a single file


---

## quickstart.md

<!-- Source: quickstart.md -->

## Quickstart

### Requirements

- Python 3.11 or newer
- API_KEYS to access to whichever LLM you choose to use.

### Installation

#### Direct Usage

In your pip install, include the [supported providers](#./providers.md) that you plan on using, or use the `all` option if you want to install support for all `any-llm` supported providers.

```bash
pip install any-llm-sdk[mistral]  # For Mistral provider
pip install any-llm-sdk[ollama]   # For Ollama provider
# install multiple providers
pip install any-llm-sdk[mistral,ollama]
# or install support for all providers
pip install any-llm-sdk[all]
```

#### Library Integration

If you're integrating `any-llm` into your own library that others will use, you only need to install the base package:

```bash
pip install any-llm-sdk
```

In this scenario, the end users of your library will be responsible for installing the appropriate provider dependencies when they want to use specific providers. `any-llm` is designed so that you'll only encounter exceptions at runtime if you try to use a provider without having the required dependencies installed.

Those exceptions will clearly describe what needs to be installed to resolve the issue.

Make sure you have the appropriate API key environment variable set for your provider. Alternatively,
you could use the `api_key` parameter when making a completion call instead of setting an environment variable.

```bash
export MISTRAL_API_KEY="YOUR_KEY_HERE"  # or OPENAI_API_KEY, etc
```

### Basic Usage

[`completion`][any_llm.completion] and [`acompletion`][any_llm.acompletion] use a unified interface across all providers.

**Recommended approach:** Use separate `provider` and `model` parameters:

```python
import os

from any_llm import completion, ProviderName

# Make sure you have the appropriate environment variable set
assert os.environ.get('MISTRAL_API_KEY')

# Recommended: separate provider and model parameters
response = completion(
    model="mistral-small-latest",
    provider="mistral", # or ProviderName.MISTRAL
    messages=[{"role": "user", "content": "Hello!"}]
)
print(response.choices[0].message.content)
```

**Alternative syntax:** You can also use the combined `provider:model` format:

```python
response = completion(
    model="mistral:mistral-small-latest",  # <provider_id>:<model_id>
    messages=[{"role": "user", "content": "Hello!"}]
)
```

The provider_id should be specified according to the [provider ids supported by any-llm](#./providers.md).
The `model_id` portion is passed directly to the provider internals: to understand what model ids are available for a provider,
you will need to refer to the provider documentation or use our [`list_models`](#./api/list_models.md)  API if the provider supports that API.

### Streaming

For the [providers that support streaming](#./providers.md), you can enable it by passing `stream=True`:

```python
output = ""
for chunk in completion(
    model="mistral-small-latest",
    provider="mistral",
    messages=[{"role": "user", "content": "Hello!"}],
    stream=True
):
    chunk_content = chunk.choices[0].delta.content or ""
    print(chunk_content)
    output += chunk_content
```

### Embeddings

[`embedding`][any_llm.embedding] and [`aembedding`][any_llm.aembedding] allow you to create vector embeddings from text using the same unified interface across providers.

Not all providers support embeddings - check the [providers documentation](#./providers.md) to see which ones do.

```python
from any_llm import embedding

result = embedding(
    model="text-embedding-3-small",
    provider="openai",
    inputs="Hello, world!" # can be either string or list of strings
)

# Access the embedding vector
embedding_vector = result.data[0].embedding
print(f"Embedding vector length: {len(embedding_vector)}")
print(f"Tokens used: {result.usage.total_tokens}")
```

### Tools

`any-llm` supports tool calling for providers that support it. You can pass a list of tools where each tool is either:

1. **Python callable** - Functions with proper docstrings and type annotations
2. **OpenAI Format tool dict** - Already in OpenAI tool format

```python
from any_llm import completion

def get_weather(location: str, unit: str = "F") -> str:
    """Get weather information for a location.

    Args:
        location: The city or location to get weather for
        unit: Temperature unit, either 'C' or 'F'
    """
    return f"Weather in {location} is sunny and 75{unit}!"

response = completion(
    model="mistral-small-latest",
    provider="mistral",
    messages=[{"role": "user", "content": "What's the weather in Pittsburgh PA?"}],
    tools=[get_weather]
)
```

any-llm automatically converts your Python functions to OpenAI tools format. Functions must have:
- A docstring describing what the function does
- Type annotations for all parameters
- A return type annotation


---

## providers.md

<!-- Source: providers.md -->

# Supported Providers

`any-llm` supports the below providers. In order to discover information about what models are supported by a provider
as well as what features the provider supports for each model, refer to the provider documentation.

!!! note "Legend"

    - **Reasoning (Completions)**: Provider can return reasoning traces alongside the assistant message via the completions and/or streaming endpoints. This does not indicate whether the provider offers separate "reasoning models".See [this](https://github.com/mozilla-ai/any-llm/issues/95)
    - **Streaming (Completions)**: Provider can stream completion results back as an iterator.
    discussion for more information.
    - **Responses API**: Provider supports the Responses API variant for text generation.  See [this](https://github.com/mozilla-ai/any-llm/issues/26) to follow along with our implementation effort.
    - **List Models API**: Provider supports listing available models programmatically via the `list_models()` function. This allows you to discover what models are available from the provider at runtime, which can be useful for dynamic model selection or validation.


<!-- The below table is auto-generated by the mkdocs build hook. It will display in the generated site -->
<!-- AUTO-GENERATED TABLE START -->
<!-- AUTO-GENERATED TABLE END -->


---

## api/responses.md

<!-- Source: api/responses.md -->

## Responses


!!! warning

    This API is experimental and subject to changes based upon our experience as we integrate additional providers.
    Use with caution.

::: any_llm.responses
::: any_llm.aresponses


---

## api/completion.md

<!-- Source: api/completion.md -->

## Completion

::: any_llm.completion
::: any_llm.acompletion


---

## api/embedding.md

<!-- Source: api/embedding.md -->

## Embedding

::: any_llm.embedding
::: any_llm.aembedding


---

## api/exceptions.md

<!-- Source: api/exceptions.md -->

## Exceptions

::: any_llm.exceptions


---

## api/list_models.md

<!-- Source: api/list_models.md -->

## Models

::: any_llm.list_models
::: any_llm.list_models_async


---
